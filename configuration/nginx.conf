upstream letsencrypt {
    server letsencrypt:80 max_fails=0 fail_timeout=1s;
}

server {
    listen 80;
    listen [::]:80;

    # Redirect all traffic in /.well-known/ to letsencrypt
    location ^~ /.well-known/acme-challenge/ {
        proxy_pass http://nodc-certificate-manager;
    }

     return 301 https://$host$request_uri;
     
}

server {
    listen 443;
    listen [::]:443;
    charset utf-8;

    ssl_certificate /etc/letsencrypt/live/nodc/fullchain.pem ;
    ssl_certificate_key /etc/letsencrypt/live/nodc/privkey.pem ;

    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3 ;
    ssl_prefer_server_ciphers off ;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384" ;

    index index.html;

    # This is not public facing server, so we can not
    # redirect using absolute paths. Yet the relative redirect start with
    # '/' which may break if running in sub-path. This is handled
    # by special location rules below.
    absolute_redirect off;

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location /api/sparql {
        include ./cors.conf;

        proxy_pass http://nodc-graphdb:7200/repositories/nodc;
        proxy_pass_request_headers on;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    location /subor/ {
        alias /data/website/;
    }
    
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ $uri.html =404;
    }

}
